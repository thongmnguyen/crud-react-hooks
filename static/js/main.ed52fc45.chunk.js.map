{"version":3,"sources":["tables/User.js","forms/AddUser.js","forms/EditUser.js","App.js","serviceWorker.js","index.js"],"names":["User","props","users","length","map","user","key","id","name","username","onClick","editUser","className","deleteUser","colSpan","AddUser","initial","useState","setUser","hanleInputChange","event","target","value","onSubmit","preventDefault","addUser","htmlFor","type","onChange","EditUser","currentUser","useEffect","handleInputChange","updateUser","setEditing","App","setUsers","editing","setCurrentUser","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed52fc45.chunk.js","sourcesContent":["import React from \"react\";\n\nconst User = props => (\n    <table>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Username</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {props.users.length > 0 ? (\n                props.users.map(user => (\n                    <tr key={user.id}>\n                        <td>{user.name}</td>\n                        <td>{user.username}</td>\n                        <td>\n                            <button\n                                onClick={() => props.editUser(user)}\n                                className=\"button muted-button\"\n                            >\n                                Edit\n                            </button>\n                            <button\n                                onClick={() => props.deleteUser(user.id)}\n                                className=\"button muted-button\"\n                            >\n                                Delete\n                            </button>\n                        </td>\n                    </tr>\n                ))\n            ) : (\n                <tr>\n                    <td colSpan={3}>No users</td>\n                </tr>\n            )}\n        </tbody>\n    </table>\n);\n\nexport default User;\n","import React, { useState } from \"react\";\n\nconst AddUser = props => {\n    const initial = { id: null, name: \"\", username: \"\" };\n\n    const [user, setUser] = useState(initial);\n\n    const hanleInputChange = event => {\n        const { name, value } = event.target;\n        setUser({ ...user, [name]: value });\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        if (!user.name || !user.username) return;\n\n        props.addUser(user);\n        setUser(initial);\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label htmlFor=\"name\">Name</label>\n            <input\n                type=\"text\"\n                name=\"name\"\n                value={user.name}\n                onChange={hanleInputChange}\n            />\n\n            <label htmlFor=\"username\">UserName</label>\n            <input\n                type=\"text\"\n                name=\"username\"\n                value={user.username}\n                onChange={hanleInputChange}\n            />\n            <button>Add new user</button>\n        </form>\n    );\n};\nexport default AddUser;\n","import React, { useState, useEffect } from \"react\";\n\nconst EditUser = props => {\n    const [user, setUser] = useState(props.currentUser);\n\n    useEffect(() => {\n        setUser(props.currentUser);\n    }, [props]);\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setUser({ ...user, [name]: value });\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        props.updateUser(user.id, user);\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label htmlFor=\"name\">Name</label>\n            <input\n                type=\"text\"\n                name=\"name\"\n                value={user.name}\n                onChange={handleInputChange}\n            />\n            <label htmlFor=\"username\">UserName</label>\n            <input\n                type=\"text\"\n                name=\"username\"\n                value={user.username}\n                onChange={handleInputChange}\n            />\n            <button>Update user</button>\n            <button\n                className=\"button muted-button\"\n                onClick={() => props.setEditing(false)}\n            >\n                Cancel\n            </button>\n        </form>\n    );\n};\n\nexport default EditUser;\n","import React, { useState } from \"react\";\nimport User from \"./tables/User\";\nimport AddUser from \"./forms/AddUser\";\nimport EditUser from \"./forms/EditUser\";\n\nconst App = () => {\n    const initial = { id: null, name: \"\", username: \"\" };\n\n    const userData = [\n        { id: 1, name: \"Happy\", username: \"happy\" },\n        { id: 2, name: \"Happy 2\", username: \"happy2\" },\n        { id: 3, name: \"Happy 3\", username: \"happy3\" }\n    ];\n\n    const [users, setUsers] = useState(userData);\n\n    const [editing, setEditing] = useState(false);\n\n    const [currentUser, setCurrentUser] = useState(initial);\n\n    const addUser = user => {\n        user.id = users.length + 1;\n        setUsers([...users, user]);\n    };\n\n    const editUser = user => {\n        setEditing(true);\n        setCurrentUser({\n            id: user.id,\n            name: user.name,\n            username: user.username\n        });\n    };\n\n    const updateUser = (id, updateUser) => {\n        setEditing(false);\n        setUsers(users.map(user => (user.id === id ? updateUser : user)));\n    };\n\n    const deleteUser = id => {\n        setUsers(users.filter(user => user.id !== id));\n    };\n\n    return (\n        <div className=\"container\">\n            <h1>CRUD with React Hooks</h1>\n            <div className=\"flex-row\">\n                <div className=\"flex-large\">\n                    {editing ? (\n                        <div>\n                            <h2>Edit User</h2>\n                            <EditUser\n                                editing={editing}\n                                setEditing={setEditing}\n                                currentUser={currentUser}\n                                updateUser={updateUser}\n                            />\n                        </div>\n                    ) : (\n                        <div>\n                            <h2>Add user</h2>\n                            <AddUser addUser={addUser} />\n                        </div>\n                    )}\n                </div>\n                <div className=\"flex-large\">\n                    <h2>View users</h2>\n                    <User\n                        users={users}\n                        editUser={editUser}\n                        deleteUser={deleteUser}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}